#!/usr/bin/env python
#
# XXX TODO
# * job.submit(): insert classads directly instead of using -a. The -a
#   approach causes some occasional bizarrity with connect client because
#   of so many layers of shell quote parsing.
# * add a json interface for connect client to cleanly pass options over
#   several shell layers.


import ConfigParser
import errno
import grp
import inspect
import os
import pwd
import shlex
import subprocess
import sys
import time

__version__ = '2.0'

ProjectFiles = ('~/.osg_default_project',
                '~/.default_project',
                '~/.ciconnect/defaultproject')
ConfigFile = '/etc/ciconnect/config.ini'

SupplementalClassAds = [
    ('ConnectWrapper', str(__version__)),
]


class Job(list):
    CondorSubmit = '/usr/bin/.condor_submit'

    def __init__(self, cfg, *args, **kwargs):
        self.cfg = cfg
        self.text = ''
        self.files = []
        self.hooks = []
        self.addads = []
        self.debugmode = False
        self.submitprog = self.CondorSubmit

        if 'debug' in kwargs:
            self.debugmode = kwargs['debug']

        if 'submitprog' in kwargs:
            self.submitprog = kwargs['submitprog']

        list.__init__(self, *args)

    def addad(self, *args):
        if not args:
            return
        if len(args) == 2 and isinstance(args[0], str):
            self.addads.append(tuple(args))
            return

        for arg in args:
            if len(arg) == 2 and isinstance(arg[0], str):
                self.addads.append((arg[0], arg[1]))
                return
            if isinstance(arg, list) or isinstance(arg, tuple):
                self.addads += list(arg)

    def options(self, *args, **kwargs):
        return self.callhook('options', *args, **kwargs)

    def preparse(self, *args, **kwargs):
        return self.callhook('preparse', *args, **kwargs)

    def postparse(self, *args, **kwargs):
        return self.callhook('postparse', *args, **kwargs)

    def presubmit(self, *args, **kwargs):
        return self.callhook('presubmit', self, *args, **kwargs)

    def isubmit(self, *args, **kwargs):
        return self.callhook('isubmit', self, *args, **kwargs)

    def postsubmit(self, *args, **kwargs):
        return self.callhook('postsubmit', self, *args, **kwargs)

    def cleanup(self, *args, **kwargs):
        return self.callhook('cleanup', self, *args, **kwargs)

    def callhook(self, type, *args, **kwargs):
        for name, hook in self.hooks:
            # each hook may return True or False
            # True -> continue, no errors
            # False -> stop
            # None -> True
            if hook(type, *args, **kwargs) is False:
                return False
        return True

    def addhook(self, name, cls, *args, **kwargs):
        if not inspect.isclass(cls):
            raise ValueError, '%s is not a class' % str(cls)

        kwargs['debug'] = self.debugmode
        hook = cls(self, *args, **kwargs)
        self.hooks.append((name, hook))
        self.hooks.sort(key=lambda x: x[0])

    def sethooks(self):
        if not self.cfg.has_section('hooks'):
            return

        for opt in self.cfg.options('hooks'):
            # opt refers to a class which we will instantiate to
            # call its hooks.
            #
            # opt may be a bare class name from within the condor_submit
            # wrapper text -- e.g. hook_debug.
            #
            # opt may contain a colon to identify a namespace that
            # contains the class.  There are two such patterns:
            #
            # * "module:clsname" -- in this case we will import module
            #   and seek clsname in its namespace.
            # * "path/to/file:clsname" -- in this case we will exec
            #   the file at the given path and seek clsname in its
            #   namespace.
            # * "file.py:clsname" -- in this case we will search for file.py
            #   in the module search path, then find clsname as above.

            args = shlex.split(self.cfg.get('hooks', opt))
            cls = self.resolveclass(args.pop(0))
            self.addhook(opt, cls, *args)

    def resolveclass(self, desc):
        if not ':' in desc:
            return eval(desc)

        path, cls = desc.split(':', 1)
        ns = dict(globals())
        if '/' in path:
            # filesystem location
            fp = open(path)
            exec fp in ns
            return ns[cls]

        elif '.' in path:
            for dir in sys.path:
                try:
                    fp = open(os.path.join(dir, path))
                    exec fp in ns
                    return ns[cls]
                except IOError:
                    pass

        else:
            # regular python module
            mod = __import__(path)
            return getattr(mod, cls)

    def update(self):
        '''Replace original text with reconstructed submit file'''
        self.text = '\n'.join(list(self.lines()))

    def parse(self, file):
        '''The job class is a subclass of list, so that we can
        interact with it using list primitives.  The members of
        the list are constructed here by parsing the submit file.
        Each list value is a 2-tuple.

        Roughly, we discard comment lines and join line continuations
        first.  If a line of the submit file has an '=' in it, then
        the list value is the pair of the left and right sides:
        (key, value).  Otherwise, the list value is a tuple of the
        complete line and None: (textline, None).
        '''

        if file:
            fp = open(file, 'r')
            self.files.append(file)
        else:
            fp = sys.stdin
            self.files.append('-')

        carry = ''
        for line in fp:
            self.text += line
            if line.lstrip().startswith('#'):
                continue

            line = line.rstrip()
            if line.endswith('\\'):
                carry += line[:-1]
                continue

            line = line.lstrip()
            if line == '':
                self.append(('', None))
                continue

            if carry:
                line = carry + line
                carry = ''

            if '=' in line:
                k, v = line.split('=', 1)
                self.append((k.strip(), v.strip()))
            else:
                self.append((line, None))

        if file:
            fp.close()

    def lines(self):
        '''Reconstruct key=value text from list pairs.'''
        for k, v in self:
            if v:
                yield k + ' = ' + v
            else:
                yield k

    def unparse(self):
        self.update()
        return self.text

    def __getitem__(self, key):
        if type(key) == type(0):
            return list.__getitem__(self, key)
        key = key.lower()
        for k, v in self:
            if key.lower() == k.lower():
                return k, v.replace('"', '')

    def __setitem__(self, key, value):
        key = key.lower()
        for i in xrange(len(self)):
            k, v = self[i]
            if key.lower() == k.lower():
                self[i][k] = (k, value)
                return
        # key not in job file. PREPEND IT so that it comes before any Queue statements
        self.insert(0, (key, value))

    def __contains__(self, key):
        key = key.lower()
        for k, v in self:
            if key.lower() == k.lower():
                return True
        return False

    def submit(self, options, debug=False):
        nargs = [self.submitprog, '-disable']

        # We could instead do:
        # for ad, value in job.addads:
        #	job['+' + ad] = value
        # job.update()
        # But this would rely more heavily on the submit file parse/reconstruct
        # logic.  It probably is fine, but so long as -a works for us let's just
        # use that.
        for ad, value in self.addads:
            nargs += ['-a', '+%s = "%s"' % (ad, value)]
        nargs += options

        if self.debugmode:
            self.debug('execv', nargs)
            return None

        else:
            p = subprocess.Popen(nargs, executable=self.submitprog,
                                 stdin=subprocess.PIPE,
                                 stdout=subprocess.PIPE,
                                 stderr=subprocess.STDOUT)
            return p

    def _msg(self, fp, args):
        fp.write(' '.join([str(x) for x in args]) + '\n')
        fp.flush()

    def msg(self, *args):
        self._msg(sys.stdout, args)

    def debug(self, *args):
        if self.debugmode:
            self._msg(sys.stderr, ('[debug]',) + args)

    def error(self, *args):
        self._msg(sys.stderr, ('[error]',) + args)


class hook(object):
    debug = False

    def __init__(self, job, *args, **kwargs):
        self.job = job
        self.cfg = job.cfg
        self.args = args
        self.kwargs = kwargs
        if 'debug' in kwargs:
            if kwargs['debug'] in (True, False):
                self.debug = kwargs['debug']

    def __call__(self, type, *args, **kwargs):
        if hasattr(self, type):
            if self.debug:
                self.job.debug('running', type, 'hooks', '[' + self.__class__.__name__ + ']')
            return getattr(self, type)(*args, **kwargs)


class hook_debug(hook):
    debug = True


class hook_lock(hook):
    def __init__(self, *args, **kwargs):
        self.lockfile = '/tmp/condor-submit-lock.' + str(os.getuid())
        hook.__init__(self, *args, **kwargs)

    def lock(self):
        '''Slow down submitters who submit jobs in parallel.
        This is to protect our schedd.'''
        try:
            os.symlink(str(os.getpid()), self.lockfile)
            return True
        except:
            return False

    def locked(self, owner=False):
        try:
            return os.lstat(self.lockfile)
        except:
            return None

    def owner(self):
        # tell whether we own the lock
        try:
            return os.readlink(self.lockfile) == str(os.getpid())
        except:
            return False

    def ensure(self):
        max_time = 33
        iter = 0

        while True:
            s = self.locked()
            if not s:
                # not locked? fall through
                break

            # our lock? don't spin.
            if self.owner():
                break

            # sleep until max_time seconds from lock file's mtime
            if time.time() >= s.st_mtime + max_time:
                self.unlock()
                break
            if self.debug:
                self.job.debug('spin while %d < %d' % (time.time(), s.st_mtime + max_time))
            elif iter % 6 == 0:
                self.job.msg('waiting for lock...')
            iter += 1
            time.sleep(5)

        # create lock and return
        return self.lock()

    def unlock(self):
        '''remove the lock file'''
        try:
            os.unlink(self.lockfile)
        except:
            pass

    def presubmit(self, *args, **kwargs):
        self.ensure()

    def postsubmit(self, *args, **kwargs):
        self.unlock()

    def cleanup(self, *args, **kwargs):
        if self.owner():
            self.unlock()


class hook_x509(hook):
    def find_x509(self):
        '''Look for the proxy cert in the standard locations, or
        alternately in the location pointed to by $X509_USER_PROXY.'''

        for file in (os.environ.get('X509_USER_PROXY'),
                     '~/.globus/usercert.pem',
                     '/tmp/x509up_u%d' % os.getuid()):
            if file:
                file = os.path.expanduser(file)
                if os.path.isfile(file):
                    return file
        return None

    def param(self, section, option, default):
        if self.cfg.has_option(section, option):
            return self.cfg.get(section, option)
        return default

    def __init__(self, *args, **kwargs):
        hook.__init__(self, *args, **kwargs)
        self.proxy = self.find_x509()
        self.voms = self.param('submit', 'proxy.voms', 'osg')
        self.validity = self.param('submit', 'proxy.validity', '192:00')
        self.renew = int(self.param('submit', 'proxy.renew', 3 * 86400))  # 3 days

    # There is room here to allow use of grid-proxy-init if VOMS
    # is not in use, but it is not implemented.  Tip: design this
    # to use grid-proxy-init if [submit]proxy.voms = false (or something).
    def proxyinit(self):
        try:
            subprocess.check_call(['voms-proxy-init',
                                   '-voms', self.voms,
                                   '-valid', self.validity])
            self.proxy = self.find_x509()
        except subprocess.CalledProcessError:
            self.proxy = None

    def proxylife(self):
        try:
            fp = subprocess.Popen(['voms-proxy-info', '-timeleft'],
                                  stdout=subprocess.PIPE,
                                  stderr=subprocess.PIPE)
            try:
                life = int(fp.communicate()[0].replace('\n', ''))
            except ValueError:
                life = None
            fp.wait()
            return life

        except subprocess.CalledProcessError:
            self.proxy = None

    def presubmit(self, *args, **kwargs):
        if not self.proxy:
            self.job.msg('\nCouldn\'t find a proxy certificate. Please set up VOMS proxy!\n')
            self.proxyinit()

            if not self.proxy:
                self.job.error('Error setting up VOMS proxy.')
                return False

        # Check lifespan of proxy cert
        life = self.proxylife()
        if life is None:
            self.job.msg('\nNo valid proxy certificate. Please set up VOMS proxy!\n')
            self.proxyinit()

        elif self.renew and life <= 0:
            self.job.msg('\nYour VOMS proxy certificate has expired. Please renew!\n')
            self.proxyinit()

        elif self.renew and life < self.renew:
            self.job.msg('\nYour VOMS proxy expires soon. Please renew!\n')
            self.proxyinit()

        if not self.proxy:
            self.job.msg('\nError setting up VOMS proxy.\n')
            return False

        # Ensure that the user proxy goes into the submit file
        if 'x509userproxy' not in self.job:
            self.job.addad('x509userproxy', self.proxy)


class hook_project(hook):
    def __init__(self, *args, **kwargs):
        hook.__init__(self, *args, **kwargs)

        self.user = pwd.getpwuid(os.getuid())
        self.mygroups = self.groups(self.user)
        self.mygroups.sort()

    def postparse(self, *args, **kwargs):
        needproject = True

        if 'universe' in self.job:
            if self.job['universe'][1] == 'local':
                needproject = False
            if self.job['universe'][1] == 'scheduler':
                needproject = False
        else:
            self.job['universe'] = 'vanilla'
            self.job.update()

        project = self.getproject()
        if needproject and not project:
            self.job.msg('')
            self.job.msg('No ProjectName ClassAd defined!')
            self.job.msg('Please run "connect project" to set your default project.')
            self.job.msg('Alternatively, define your %s project ID in your submit file.' % self.cfg.get('connect',
                                                                                                        'name'))
            self.job.msg('	 Example:  +ProjectName = "MyProjectName"')
            self.job.msg('')
            self.showprojects()
            return 1

        if project:
            if self.cfg.has_section('project-replacements'):
                for left, right in self.cfg.items('project-replacements'):
                    off = project.lower().find(left.lower())
                    if off > -1:
                        project = project[:off] + right + project[off + len(left):]

            if project not in self.mygroups:
                self.job.msg('')
                self.job.msg('Sorry, the project you specified (%s) is not valid' % project)
                self.job.msg('or you are not in its list of allowed users.')
                self.job.msg('')
                self.showprojects()
                return 1

        self.job.addad('ProjectName', project)

        acctgroup = self.acctgroup(project)
        if acctgroup:
            self.job.addad('AccountingGroup', acctgroup)

    def groups(self, user):
        '''Get all groups (for a given user)'''
        groups = []

        # blacklist should just be in the ini file
        fp = open('/etc/ciconnect/project_blacklist')
        blacklist = [line.strip() for line in fp if not line.startswith('#')]
        fp.close()

        for group in grp.getgrall():
            name = group.gr_name.replace('@', '')
            if name in blacklist:
                continue
            if user and user.pw_name in group.gr_mem:
                groups.append(name)
            elif user is None:
                groups.append(name)
        return groups

    def getproject(self):
        project = None
        if '+projectname' in self.job:
            project = self.job['+projectname'][1]

        for file in ProjectFiles:
            file = os.path.expanduser(file)
            if not project:
                try:
                    fp = open(file, 'r')
                    project = fp.readline().strip()
                    fp.close()
                except:
                    pass

        return project

    def showprojects(self):
        self.job.msg('The following projects are available to you:')
        for group in self.mygroups:
            self.job.msg("	 " + group)

    def acctgroup(self, project):
        # acctgroup = 'group_other.' + self.user.pw_name
        acctgroup = 'group_opportunistic.' + self.user.pw_name

        # xsede logics:
        # if grep -i "^$PROJECT:" /etc/osg/xsede-projects-low-priority >/dev/null 2>&1; then
        #	#acctgroup="group_xsede.low.$me"
        #	acctgroup="group_opportunistic.$me"
        # elif grep -i "^$PROJECT:" /etc/osg/xsede-projects-high-priority >/dev/null 2>&1; then
        #	acctgroup="group_xsede.high.$me"
        # elif [ "x$XSEDE_PROJECT" = "xTG-TRA100004" ];then
        #	# special rule for TG-TRA100004 - rynge 8/12/13
        #	acctgroup="group_other.$me"
        # fi

        if project == 'OSG-Staff':
            acctgroup = 'group_xsede.high.' + self.user.pw_name

        # Accouting group OVERRIDE required by MWT2
        acctgroup = 'group_opport.vo.uc3.' + self.user.pw_name
        return acctgroup


class hook_printsub(hook):
    def presubmit(self, *args, **kwargs):
        self.job.msg('')
        self.job.msg(self.job.unparse())
        return False


def parse_submit(job, submitfile, options, readcmds=False):
    # Call preparse hooks before parsing the submit file
    if job.preparse() is False:
        job.cleanup()
        return 31

    # Parse the submit file
    if readcmds:
        try:
            job.parse(submitfile)
        except IOError, e:
            if e.errno == errno.ENOENT:
                job.error('cannot read submit file "%s"' % submitfile)
                return 11
            raise
        except KeyboardInterrupt:
            job.msg('\nbreak (no jobs submitted)')
            return 10

    # Call postparse hooks
    if job.postparse() is False:
        job.cleanup()
        return 32

    # Run presubmit hooks
    if job.presubmit() is False:
        job.cleanup()
        return 33

    # Submit job
    p = job.submit(options)
    if p:
        try:
            p.stdin.write(job.text)
            p.stdin.close()
        except IOError, e:
            pass

        while True:
            # XXX TODO read dots character by character to echo them in real time.
            # This is not as simple as read(1) because we need to replace strings
            # too. So we need to read whole strings when possible, single bytes
            # otherwise.
            data = p.stdout.read()
            # data = data.replace('Submitting job(s)', '')
            # data = data.replace(os.path.basename(CondorSubmit), os.path.basename(sys.argv[0]))
            if not data:
                break
            sys.stdout.write(data)
            sys.stdout.flush()
            job.isubmit(data)
        rc = p.wait()

    else:
        rc = 0

    # Call postsubmit hooks
    if job.postsubmit() is False:
        job.cleanup()
        return 34

    # Evaluate result
    if rc < 0:
        job.error('condor_submit received signal', -rc)
        return 1
    return rc


def main(args):
    lock = True

    cfg = ConfigParser.RawConfigParser()
    cfg.read(ConfigFile)

    job = Job(cfg, debug=False)
    job.addad(SupplementalClassAds)

    # First off, let's reset $HOME.  os.path uses $HOME for '~'
    # expansion, but HOME is altered by connect client. We need
    # to use the actual home.
    user = pwd.getpwuid(os.getuid())
    os.environ['HOME'] = user.pw_dir

    validoptions = (
        # option, requires optarg?, skip submitfile?
        ('-help', False, True),
        ('-verbose', False, False),
        ('-interactive', False, False),
        ('-unused', False, False),
        ('-name', True, False),
        ('-remote', True, False),
        ('-append', True, False),
        ('-addr', True, False),
        ('-disable', False, False),
        ('-spool', False, False),
        ('-password', True, False),
        ('-pool', True, False),
        ('-dump', True, False),
        ('-stm', True, False),
    )

    submitfile = None
    options = []
    nargs = []
    skip = False
    readcmds = True
    for arg in args:
        matched = False
        if skip:
            skip = False
            options.append(arg)
            continue
        for vopt, hasargs, skipsub in validoptions:
            if vopt.startswith(arg):
                options.append(arg)
                if hasargs:
                    skip = True
                if skipsub:
                    readcmds = False
                matched = True
                break

        if arg == '--debug':
            job.debugmode = True
            matched = True
        if arg.startswith('--config='):
            cfg.read(arg[9:])
            matched = True
        if arg == '--printconf':
            cfg.write(sys.stdout)
            return 0
        if arg == '--printsub':
            job.addhook('99printsub', hook_printsub)
            matched = True
        if arg == '--nolock':
            lock = False
            matched = True

        if not matched:
            nargs.append(arg)

    job.sethooks()

    # Call options hooks first thing after option parsing
    if job.options(nargs) is False:
        job.cleanup()
        return 30

    # submit file in nargs
    if nargs:
        submitfile = nargs.pop(0)

    if lock:
        job.addhook('00lock', hook_lock)

    # If x509 cert is required, add that hook
    if cfg.has_section('submit') and \
            cfg.has_option('submit', 'requirex509') and \
            cfg.getboolean('submit', 'requirex509'):
        job.addhook('00x509', hook_x509)

    job.addad('SubmitFile', str(submitfile))

    try:
        return parse_submit(job, submitfile, options, readcmds=readcmds)
    except KeyboardInterrupt:
        job.cleanup()
        print '\nbreak'
        return 1
    except:
        job.cleanup()
        raise


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
