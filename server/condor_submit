#!/usr/bin/env python

__version__ = '2.0'

import os
import sys
import ConfigParser
import pwd
import grp
import tempfile
import subprocess
import time
import types
import inspect

CondorSubmit = '/usr/bin/.condor_submit'
ProjectFiles = ('~/.osg_default_project',
                '~/.default_project',
                '~/.ciconnect/defaultproject')
ConfigFile = '/etc/ciconnect/config.ini'

SupplementalClassAds = [
	#('UsedOCWrapper', 'TRUE'),
	('ConnectWrapper', str(__version__)),
]

class hook(object):
	debug = False

	def __init__(self, cfg, debug=None):
		self.cfg = cfg
		if debug in (True, False):
			self.debug = debug

	def __call__(self, type, *args, **kwargs):
		if self.debug:
			print 'running', type, 'hooks', '[' + self.__class__.__name__ + ']'
		if hasattr(self, type):
			getattr(self, type)(*args, **kwargs)


class hook_debug(hook):
	debug = True


class hook_lock(hook):
	def __init__(self, *args, **kwargs):
		self.lockfile = '/tmp/condor-submit-lock.' + str(os.getuid())
		hook.__init__(self, *args, **kwargs)

	def lock(self):
		'''Slow down submitters who submit jobs in parallel.
		This is to protect our schedd.'''
		try:
			open(self.lockfile, 'w+')
			return True
		except:
			return False

	def locked(self):
		try:
			s = os.stat(self.lockfile)
			return s
		except:
			return None

	def ensure(self):
		max_time = 360

		while True:
			s = self.locked()
			if not s:
				# not locked? fall through
				break

			# sleep until max_time seconds from lock file's mtime
			if time.time() >= s.st_mtime + max_time:
				self.unlock()
				break
			if self.debug:
				print 'spin while %d < %d' % (time.time(), s.st_mtime + max_time)
			time.sleep(5)

		# create lock and return
		return self.lock()

	def unlock(self):
		'''remove the lock file'''
		try:
			os.unlink(self.lockfile)
		except:
			pass

	def presubmit(self, *args, **kwargs):
		self.ensure()

	def postsubmit(self, *args, **kwargs):
		self.unlock()


def groups(user):
	'''Get all groups (for a given user)'''
	groups = []

	fp = open('/etc/ciconnect/project_blacklist')
	blacklist = [line.strip() for line in fp if not line.startswith('#')]
	fp.close()

	for group in grp.getgrall():
		name = group.gr_name.replace('@', '')
		if name in blacklist:
			continue
		if user and user.pw_name in group.gr_mem:
			groups.append(name)
		elif user is None:
			groups.append(name)
	return groups


def getproject(sub):
	project = None
	if '+projectname' in sub:
		project = sub['+projectname'][1]

	for file in ProjectFiles:
		file = os.path.expanduser(file)
		if not project:
			try:
				fp = open(file, 'r')
				project = fp.readline().strip()
				fp.close()
			except:
				pass

	return project


class submit(list):
	def __init__(self, cfg, *args):
		self.cfg = cfg
		self.text = ''
		self.instances = {}
		self.hooks = {
			'preparse': [],
			'postparse': [],
			'presubmit': [],
			'isubmit': [],
			'postsubmit': [],
		}

		list.__init__(self, *args)

	def preparse(self, *args, **kwargs):
		return self.callhook('preparse', *args, **kwargs)

	def postparse(self, *args, **kwargs):
		return self.callhook('postparse', *args, **kwargs)

	def presubmit(self, *args, **kwargs):
		return self.callhook('presubmit', *args, **kwargs)

	def isubmit(self, *args, **kwargs):
		return self.callhook('isubmit', *args, **kwargs)

	def postsubmit(self, *args, **kwargs):
		return self.callhook('postsubmit', *args, **kwargs)

	def callhook(self, type, *args, **kwargs):
		for hook in self.hooks[type]:
			# each hook may return True or False
			# True -> continue, no errors
			# False -> stop
			# None -> True
			if hook(type, *args, **kwargs) is False:
				return False
		return True

	def hook(self, type, cls):
		if not inspect.isclass(cls):
			raise ValueError, '%s is not a class' % str(cls)

		# use cls.hooktype as the hook entry point
		# e.g. given this:
		# [hooks]
		# presubmit = myclass
		# We will call myclass().presubmit() during hook processing.  Note
		# that myclass will be instantiated ONCE.
		if cls not in self.instances:
			self.instances[cls] = cls(self.cfg)
		self.hooks[type].append(self.instances[cls])


	def sethooks(self):
		if not self.cfg.has_section('hooks'):
			return
		for opt in sorted(self.cfg.options('hooks')):
			if '.' in opt:
				hooktype, sortkey = opt.split('.', 1)
			else:
				hooktype = opt
			self.hook(hooktype, eval(self.cfg.get('hooks', opt)))

	def update(self):
		'''Replace original text with reconstructed submit file'''
		self.text = '\n'.join(list(self.lines()))

	def parse(self, file):
		if file:
			fp = open(file, 'r')
		else:
			fp = sys.stdin

		carry = ''
		for line in fp:
			self.text += line
			if line.lstrip().startswith('#'):
				continue

			line = line.rstrip()
			if line.endswith('\\'):
				carry += line[:-1]
				continue

			line = line.lstrip()
			if line == '':
				self.append(('', None))
				continue

			if carry:
				line = carry + line
				carry = ''

			if '=' in line:
				k, v = line.split('=', 1)
				self.append((k.strip(), v.strip()))
			else:
				self.append((line, None))

		if file:
			fp.close()

	def lines(self):
		for k, v in self:
			if v:
				yield k + ' = ' + v
			else:
				yield k

	def __getitem__(self, key):
		if type(key) == type(0):
			return list.__getitem__(self, key)
		key = key.lower()
		for k, v in self:
			if key.lower() == k.lower():
				return k, v.replace('"', '')

	def __setitem__(self, key, value):
		key = key.lower()
		for i in xrange(len(self)):
			k, v = self[i]
			if key.lower() == k.lower():
				self[i][k] = (k, value)
				return
		self.append((key, value))

	def __contains__(self, key):
		key = key.lower()
		for k, v in self:
			if key.lower() == k.lower():
				return True
		return False


# There is room here to allow use of grid-proxy-init if VOMS
# is not in use, but it is not implemented.  Tip: design this
# to use grid-proxy-init if [submit]proxy.voms = false (or something).
def x509setup(cfg):
	def find_x509():
		'''Look for the proxy cert in the standard locations, or
		alternately in the location pointed to by $X509_USER_PROXY.'''

		for file in (os.environ.get('X509_USER_PROXY'),
		             '~/.globus/usercert.pem',
		             '/tmp/x509up_u%d' % os.getuid()):
			if file:
				file = os.path.expanduser(file)
				if os.path.isfile(file):
					return file
		return None

	if cfg.has_option('submit', 'proxy.voms'):
		voms = cfg.get('submit', 'proxy.voms')
	else:
		voms = 'osg'

	if cfg.has_option('submit', 'proxy.validity'):
		validity = cfg.get('submit', 'proxy.validity')
	else:
		validity = '192:00'

	if cfg.has_option('submit', 'proxy.renew'):
		# With fewer than proxy.renew seconds in proxy life, force renewal
		# If 0, do not force renewal.
		renew = cfg.get('submit', 'proxy.renew')
	else:
		renew = 3 * 86400		# 3 days

	proxy = find_x509()
	if not proxy:
		print 
		print 'Couldn\'t find a proxy certificate. Please set up VOMS proxy!'
		print
		subprocess.check_call(['voms-proxy-init',
		                       '-voms', voms,
		                       '-valid', validity])
		proxy = find_x509()
		if not proxy:
			print 'Error setting up VOMS proxy.'
			return None

	# Check lifespan of proxy cert
	fp = subprocess.Popen(['voms-proxy-info', '-timeleft'],
	                      stdout=subprocess.PIPE,
	                      stderr=subprocess.PIPE)
	try:
		life = int(fp.communicate()[0].replace('\n', ''))
	except ValueError:
		print
		print 'No valid proxy certificate. Please set up VOMS proxy!'
		print
		subprocess.check_call(['voms-proxy-init',
		                       '-voms', voms,
		                       '-valid', validity])
	fp.close()

	if renew and life <= 0:
		print
		print 'Your VOMS proxy certificate has expired. Please renew!'
		print
		subprocess.check_call(['voms-proxy-init',
		                       '-voms', voms,
		                       '-valid', validity])
	if renew and life < renew:
		print
		print 'Your VOMS proxy expires soon. Please renew!'
		print
		subprocess.check_call(['voms-proxy-init',
		                       '-voms', voms,
		                       '-valid', validity])

	return proxy


def setacctgroup(user, project):
	#acctgroup = 'group_other.' + user.pw_name
	acctgroup = 'group_opportunistic.' + user.pw_name

	# xsede logics:
	#if grep -i "^$PROJECT:" /etc/osg/xsede-projects-low-priority >/dev/null 2>&1; then
	#	#acctgroup="group_xsede.low.$me"
	#	acctgroup="group_opportunistic.$me"
	#elif grep -i "^$PROJECT:" /etc/osg/xsede-projects-high-priority >/dev/null 2>&1; then
	#	acctgroup="group_xsede.high.$me"
	#elif [ "x$XSEDE_PROJECT" = "xTG-TRA100004" ];then
	#	# special rule for TG-TRA100004 - rynge 8/12/13
	#	acctgroup="group_other.$me"
	#fi

	if project == 'OSG-Staff':
		acctgroup = 'group_xsede.high.' + user.pw_name

	# Accouting group OVERRIDE required by MWT2
	acctgroup = 'group_opport.vo.uc3.' + user.pw_name

	return acctgroup


def main(args):
	debug = False
	lock = True

	cfg = ConfigParser.RawConfigParser()
	cfg.read(ConfigFile)
	classads = list(SupplementalClassAds)

	user = pwd.getpwuid(os.getuid())
	#not used#group = grp.getgrgid(os.getgid())
	mygroups = groups(user)
	mygroups.sort()

	# First off, let's reset $HOME.  os.path uses $HOME for '~'
	# expansion, but HOME is altered by connect client. We need
	# to use the actual home.
	os.environ['HOME'] = user.pw_dir

	validoptions = (
		# option, requires optarg?, skip submitfile?
		('-help', False, True),
		('-verbose', False, False),
		('-interactive', False, False),
		('-unused', False, False),
		('-name', True, False),
		('-remote', True, False),
		('-append', True, False),
		('-addr', True, False),
		('-disable', False, False),
		('-spool', False, False),
		('-password', True, False),
		('-pool', True, False),
		('-dump', True, False),
		('-stm', True, False),
	)

	submitfile = None
	options = []
	skip = False
	readcmds = True
	for arg in args:
		if debug:
			print '==', arg
		matched = False
		if skip:
			skip = False
			options.append(arg)
			continue
		for vopt, hasargs, skipsub in validoptions:
			if vopt.startswith(arg):
				options.append(arg)
				if hasargs:
					skip = True
				if skipsub:
					readcmds = False
				matched = True
				break
		if arg == '--debug':
			debug = True	# wrapper option, do not append to options[]
			matched = True
		if arg.startswith('--config='):
			cfg.read(arg[9:])
			matched = True
		if arg == '--dump':
			cfg.write(sys.stdout)
			return 0
		if arg == '--nolock':
			lock = False
			matched = True
		if not matched:
			submitfile = arg

	if debug:
		print '>>', options

	sub = submit(cfg)
	sub.sethooks()

	if lock:
		sub.hook('presubmit', hook_lock)
		sub.hook('postsubmit', hook_lock)

	sub.preparse()

	if readcmds:
		# Print usual Condor pre-reponse
		sys.stdout.write('Submitting job(s)')
		sys.stdout.flush()
		try:
			sub.parse(submitfile)
		except KeyboardInterrupt:
			print '\nbreak (no jobs submitted)'
			return 10

	sub.postparse()

	needproject = True

	if 'universe' in sub:
		if sub['universe'][1] == 'local':
			needproject = False
		if sub['universe'][1] == 'scheduler':
			needproject = False
	else:
		sub['universe'] = 'vanilla'
		sub.update()

	def showprojects():
		print 'The following projects are available to you:'
		for group in mygroups:
			print "	 " + group

	project = getproject(sub)
	if needproject and not project:
		print
		print 'No ProjectName ClassAd defined!'
		print 'Please run "connect project" to set your default project.'
		print 'Alternatively, define your %s project ID in your submit file.' % cfg.get('connect', 'name')
		print '	 Example:  +ProjectName = "MyProjectName"'
		print
		showprojects()
		return 1

	if project:
		if cfg.has_section('project-replacements'):
			for left, right in cfg.items('project-replacements'):
				off = project.lower().find(left.lower())
				if off > -1:
					project = project[:off] + right + project[off+len(left):]

		if project not in mygroups:
			print
			print 'Sorry, the project you specified (%s) is not valid' % project
			print 'or you are not in its list of allowed users.'
			print
			showprojects()
			return 1

	# Check for valid proxies if needed, option to renew.
	# Injects the x509userproxy classad for the user.
	if cfg.has_section('submit') and \
	   cfg.has_option('submit', 'requirex509') and \
	   cfg.getboolean('submit', 'requirex509'):
		try:
			proxy = x509setup(cfg)
			if proxy is None:
				return 20
		except subprocess.CalledProcessError:
			print
			print 'Error setting up VOMS proxy certificate.'
			print
			return 22

		# Ensure that the user proxy goes into the submit file
		if 'x509userproxy' not in sub:
			classads.append(('x509userproxy', proxy))

	acctgroup = setacctgroup(user, project)

	nargs = [CondorSubmit, '-disable']
	classads.append(('ProjectName', project))
	classads.append(('SubmitFile', str(submitfile)))

	if acctgroup:
		classads.append(('AccountingGroup', acctgroup))

	# We could instead do:
	# for ad, value in classads:
	#	sub['+' + ad] = value
	# sub.update()
	# But this would rely more heavily on the submit file parse/reconstruct
	# logic.  It probably is fine, but so long as -a works for us let's just
	# use that.
	for ad, value in classads:
		nargs += ['-a', '+%s = "%s"' % (ad, value)]
	nargs += options

	if debug:
		print nargs
		print sub.text
		return 0

	sub.presubmit()

	p = subprocess.Popen(nargs, executable=CondorSubmit,
						 stdin=subprocess.PIPE,
						 stdout=subprocess.PIPE,
						 stderr=subprocess.STDOUT)
	try:
		p.stdin.write(sub.text)
		p.stdin.close()
	except IOError, e:
		pass

	while True:
		# XXX TODO read dots character by character to echo them in real time.
		# This is not as simple as read(1) because we need to replace strings
		# too. So we need to read whole strings when possible, single bytes
		# otherwise.
		data = p.stdout.read()
		data = data.replace('Submitting job(s)', '')
		data = data.replace(os.path.basename(CondorSubmit), os.path.basename(sys.argv[0]))
		if not data:
			break
		sys.stdout.write(data)
		sys.stdout.flush()
		sub.isubmit()
	rc = p.wait()

	sub.postsubmit()
	if rc < 0:
		print 'condor_submit received signal', -rc
		return 1
	return rc


if __name__ == '__main__':
	sys.exit(main(sys.argv[1:]))
